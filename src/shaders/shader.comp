#version 450

// Constants
const float IMAGE_WIDTH = 1920.0;
const float IMAGE_HEIGHT = 1080.0;

float MAX_FLOAT = 340282350000.0;
const int SPHERE_COUNT = 4;
const int LIGHT_COUNT = 3;

const int RAY_RECURSION_DEPTH = 4;

// Declare custom functions
vec3 canvasToViewport();
vec3 traceRay(vec3 O, vec3 D, float t_min, float t_max);
vec2 closestIntersection(vec3 P, vec3 D, float t_min, float t_max);
vec2 intersectRaySphere(vec3 P, vec3 D, vec3 center, float color);
float computeLighting(vec3 P, vec3 N, vec3 V, float specularity);
vec3 reflectRay(vec3 R, vec3 N);

// Layout bindings
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0, rgba8) uniform writeonly image2D img;

layout(set = 0, binding = 1) uniform Camera {
    vec3 position;
    float padding;
    mat4 rotation;
} camera;

struct Sphere {
    vec4 center;
    vec4 color;
    float radius;
    float specular;
    float reflective;
    float padding;
};

layout(set = 0, binding = 2) uniform Spheres {
    Sphere instances[SPHERE_COUNT];
} spheres;

struct Light {
    vec4 position;
    float intensity;
    int lightType;// 0 = Ambient, 1 = Point, 2 = Directional
    vec2 padding;// Required for proper data alignment
};

layout(set = 0, binding = 3) uniform Lights {
    Light instances[LIGHT_COUNT];
} lights;

void main() {
    // Base raytracing for spheres
    vec3 D = mat3(camera.rotation) * canvasToViewport();
    vec3 sphereColor = traceRay(camera.position, D, 1.0, MAX_FLOAT);
    // Write color value to image buffer
    imageStore(img, ivec2(gl_GlobalInvocationID.xy), vec4(sphereColor, 1.0));
}

struct Ray {
    vec3 color;
    float reflectiveness;
};

vec3 traceRay(vec3 O, vec3 D, float t_min, float t_max) {
    // Can't do recursion, so here's what we'll do
    // 1. Create an array of Rays that we find. Generate rays until either we hit a non-reflective surface,
    //    no object, or we hit the recursion limit (which, handily, will also be our max array size)
    // 2. Iterate backwards through rays, computing the array color as we go.
    // Since we will be using an array, we must use a constant size. This is fine since our recursion would be
    // the same regardless
    Ray rays[RAY_RECURSION_DEPTH];
    vec3 P = O;
    vec3 R = D;
    int counter;
    for (counter = 0; counter < RAY_RECURSION_DEPTH; ++counter) {
        vec2 tracedRay = closestIntersection(P, R, t_min, t_max);
        int closest_sphere_index = int(tracedRay.x);
        // If we don't hit an object, we're done
        if (closest_sphere_index == -1) {
            rays[counter] = Ray(vec3(0.0), 0.0);
            break;
        }

        float closest_t = tracedRay.y;

        // Compute local color
        Sphere sphere = spheres.instances[closest_sphere_index];
        P += (closest_t * R);// Compute intersection
        vec3 N = normalize(P - sphere.center.xyz);

        // V is the vector from the object to the camera, since for reflection we need to know the angle of the
        // ray reflecting off the object. We already have D, which is the vector of the camera *to* the object,
        // so just invert that
        vec3 localColor = sphere.color.xyz * computeLighting(P, N, -R, sphere.specular);

        // If the object is not reflective, we're done
        float reflectiveness = sphere.reflective;
        if (reflectiveness <= 0.0) {
            rays[counter] = Ray(localColor, 0.0);
            break;
        }

        // Store the new ray's color and the sphere's reflectiveness
        rays[counter] = Ray(localColor, reflectiveness);

        // Reflect the ray off the new sphere
        R = reflectRay(-R, N);
        t_min = 0.1;
        t_max = MAX_FLOAT;
    }

    vec3 final_color = rays[counter].color;

    // Now that we have our rays, go back through them in reverse order and assemble the color
    for (int i = counter; i >= 0; --i) {
        Ray ray = rays[i];
        final_color = ray.color * (1.0 - ray.reflectiveness) + final_color * ray.reflectiveness;
    }

    return final_color;
}

vec2 closestIntersection(vec3 P, vec3 D, float t_min, float t_max) {
    float closest_t = MAX_FLOAT;
    int closest_sphere_index = -1;

    for (int i = 0; i < SPHERE_COUNT; ++i) {
        Sphere sphere = spheres.instances[i];
        vec2 t = intersectRaySphere(P, D, sphere.center.xyz, sphere.radius);
        float t1 = t.x;
        float t2 = t.y;

        if ((t_min <= t1 && t1 <= t_max) && t1 < closest_t) {
            closest_t = t1;
            closest_sphere_index = i;
        }
        if ((t_min <= t2 && t2 <= t_max) && t2 < closest_t) {
            closest_t = t2;
            closest_sphere_index = i;
        }
    }
    return vec2(float(closest_sphere_index), closest_t);
}

vec3 reflectRay(vec3 R, vec3 N) {
    return 2.0 * N * dot(N, R) - R;
}

float computeLighting(vec3 P, vec3 N, vec3 V, float specularity) {
    float intensity = 0.0;
    for (int i = 0; i < LIGHT_COUNT; ++i) {
        Light light = lights.instances[i];
        if (light.lightType == 0) { // Ambient light
            intensity += light.intensity;
        } else {
            // Assume directional at first
            vec3 L = light.position.xyz;
            float t_max = MAX_FLOAT;
            // Point light
            if (light.lightType == 1) {
                L -= P;
                t_max = 1.0;
            }

            // Shadow check
            vec2 shadowCheck = closestIntersection(P, L, 0.001, t_max);
            float shadowCheckSphere = shadowCheck.x;

            if (shadowCheckSphere < 0.0) {
                // Diffuse lighting
                float n_dot_l = dot(N, L);
                if (n_dot_l > 0.0) {
                    intensity += (light.intensity * (n_dot_l / (length(N) * length(L))));
                }

                // Specular lighting
                if (specularity != -1) {
                    vec3 R = reflectRay(L, N);
                    float r_dot_v = dot(R, V);
                    if (r_dot_v > 0.0) { // Don't add negative light intensity
                        intensity += light.intensity * pow(r_dot_v / (length(R) * length(V)), specularity);
                    }
                }
            }
        }
    }
    return intensity;
}

// Hardcoding in the canvas height and width for now. Not messing with that yet
vec3 canvasToViewport() {
    // Since we're not sending in viewport coordinates, we need to calculate them here
    float x = gl_GlobalInvocationID.x - (IMAGE_WIDTH / 2.0);
    float y = gl_GlobalInvocationID.y - (IMAGE_HEIGHT / 2.0);
    float horizontal_fov = IMAGE_WIDTH / IMAGE_HEIGHT;

    return vec3(x * (horizontal_fov / IMAGE_WIDTH), -(y * (1.0 / IMAGE_HEIGHT)), 1.0);
}

vec2 intersectRaySphere(vec3 P, vec3 D, vec3 center, float radius) {
    vec3 CO = P - center;

    float a = dot(D, D);
    float b = 2.0 * dot(CO, D);
    float c = dot(CO, CO) - (radius * radius);

    float discriminant = (b * b) - (4.0 * a * c);

    if (discriminant < 0.0) {
        return vec2(MAX_FLOAT, MAX_FLOAT);
    }

    float t1 = (-b + sqrt(discriminant)) / (2.0 * a);
    float t2 = (-b - sqrt(discriminant)) / (2.0 * a);
    return vec2(t1, t2);
}